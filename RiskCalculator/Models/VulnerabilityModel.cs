using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace RiskCalculator.Models
{
    class VulnerabilityModel
    {
        public string Id { get; set; }

        public string Description { get; set; }

        public string Severity { get; set; }

        public string VectorV2 { get; set; }
        public string VectorV3 { get; set; }

        public BaseMetricV2 MetricV2 { get; set; }
        public BaseMetricV3 MetricV3 { get; set; }

        public string Сvss2 
        { 
            get
            {
                return $"";
            }

            private set { }        
        }
        public string Сvss3 { get; set; }

        // Массив корректирующих параметров для Lrv.
        public double[] uLrv { get; set; }

        // Показатель степени риска.
        public double Lrv { get; set; }

        // Структурированный параметр степени риска.
        // Key - uLrv[i].
        // Value - trapList[i].degreeRisk
        public Dictionary<double, string> SP { get; set; }

        public string LrvSp 
        { 
            get 
            {
                string result = $"Степінь ризику з числовим еквівалентом {Math.Round(Lrv,2)}:";
                result += SP.Count < 2 ? " знаходиться в зоні" : " граничить між";

                foreach (var sp in SP)
                {
                    if(sp.Key != 1)
                        result += $" {sp.Key} ({sp.Value})";
                    else 
                        result += $" ({sp.Value})";
                }

                return result;
            }
            private set { }
        }

        public Metrics metrics;

        public VulnerabilityModel()
        {
            metrics = new Metrics();
            SP = new Dictionary<double, string>();
        }

    }

    class Metrics
    {
        public BaseVector baseV;
        public TemporalVector tempV;
        public EnvironmentalVector envV;

        public Metrics()
        {
            baseV = new BaseVector();
            tempV = new TemporalVector();
            envV = new EnvironmentalVector();
        }
    }

    class BaseVector
    {
        public double Score { get; set; }
        public double[] uzB { get; set; }

    }

    class TemporalVector
    {
        public double Score { get; set; }
        public double[] uzT { get; set; }

    }

    class EnvironmentalVector
    {
        public double Score { get; set; }
        public double[] uzE { get; set; }

    }

}
